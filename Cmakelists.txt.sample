cmake_minimum_required(VERSION 3.12)
project(LimbicSystem)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Define building type (Release, Debug)
if (CMAKE_BUILD_TYPE STREQUAL "")
    # Build type is not set eg. command was "cmake .."
    message(STATUS "  Diag: Build type was unspecified, set to Release")
    set(CMAKE_BUILD_TYPE Release)
else ()
    message(STATUS "  Diag: Build type specified as '${CMAKE_BUILD_TYPE}'")
endif ()

# Define an option to toggle between main and test builds
#option(RUN_TESTS "Build with tests" OFF)

if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    set_directory_properties(PROPERTIES COMPILE_DEFINITIONS "_DEBUG")
else ()
    set_directory_properties(PROPERTIES COMPILE_DEFINITIONS "_RELEASE")
endif ()

# Find ALSA package
find_package(ALSA REQUIRED)

# Include ALSA directories
include_directories(${ALSA_INCLUDE_DIRS})

# Add executable
if(RUN_TESTS)
    message(STATUS "  Diag: Running Tests")

    #GTest
    enable_testing()
    include(FetchContent)
    FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip
    )
    # For Windows: Prevent overriding the parent project's compiler/linker settings
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
    FetchContent_MakeAvailable(googletest)


    include_directories(include Tests/include)
    # Source files
    file(GLOB_RECURSE SOURCES src/*/*.cpp Tests/src/*.cpp Tests/*.cpp)

    add_executable(${PROJECT_NAME} ${SOURCES} Tests/RunTests.cpp)
    # target_compile_definitions(${PROJECT_NAME} PRIVATE RUN_TESTS)



    target_link_libraries(${PROJECT_NAME} 
        ${ALSA_LIBRARIES}
        GTest::gtest_main
    )
    
    include(GoogleTest)
    gtest_discover_tests(${PROJECT_NAME})
else()
    message(STATUS "  Diag: Running Main App")
    # Include directories
    include_directories(include)
    # Source files
    file(GLOB_RECURSE SOURCES src/*.cpp src/*/*.cpp)

    add_executable(${PROJECT_NAME} ${SOURCES} src/main.cpp)
    # Link ALSA library
    target_link_libraries(${PROJECT_NAME} ${ALSA_LIBRARIES})

endif()



# Install executable
install(TARGETS ${PROJECT_NAME} DESTINATION bin)